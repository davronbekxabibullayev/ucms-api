// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ucms.Stock.Infrastructure.EntityFramework;

#nullable disable

namespace Ucms.Stock.Api.Infrastructure.Migrations
{
    [DbContext(typeof(StockDbContext))]
    partial class StockDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("IncomeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IncomeStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("IncomeTransferStatus")
                        .HasColumnType("integer");

                    b.Property<int>("IncomeType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("StockId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.IncomeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("IncomeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MeasurementUnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkuId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IncomeId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("SkuId");

                    b.ToTable("IncomeItems");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.IncomeOutcome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("IncomeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IncomeStockId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OutcomeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OutcomeStockId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IncomeId")
                        .IsUnique();

                    b.HasIndex("IncomeStockId");

                    b.HasIndex("OutcomeId")
                        .IsUnique();

                    b.HasIndex("OutcomeStockId");

                    b.ToTable("IncomeOutcomes");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameKa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.MeasurementUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("EmergencyType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Multiplier")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameKa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.OrganizationMeasurementUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MeasurementUnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("OrganizationMeasurementUnits");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.OrganizationSku", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkuId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SkuId");

                    b.ToTable("OrganizationSkus");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Outcome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<Guid?>("ExecutionId")
                        .HasColumnType("uuid");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTimeOffset>("OutcomeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OutcomeStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("OutcomeTransferStatus")
                        .HasColumnType("integer");

                    b.Property<int>("OutcomeType")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("StockId");

                    b.ToTable("Outcomes");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.OutcomeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MeasurementUnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OutcomeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkuId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("OutcomeId");

                    b.HasIndex("SkuId");

                    b.ToTable("OutcomeItems");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlternativeName")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("EmergencyType")
                        .HasColumnType("integer");

                    b.Property<string>("InternationalCode")
                        .HasColumnType("text");

                    b.Property<string>("InternationalName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameKa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Sku", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("EmergencyType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ManufacturerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MeasurementUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameKa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Skus");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid[]>("EmployeeIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameKa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("StockCategory")
                        .HasColumnType("integer");

                    b.Property<int>("StockType")
                        .HasColumnType("integer");

                    b.Property<int>("StorageCondition")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.StockBalanceRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MeasurementUnitId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PreviousAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("VariableAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SkuId");

                    b.HasIndex("StockId");

                    b.ToTable("StockBalanceRegistry");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.StockDemand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BroadcastStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DemandDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DemandStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid?>("OutcomeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OutcomeId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("StockDemands");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.StockDemandItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MeasurementUnitId")
                        .HasColumnType("uuid");

                    b.Property<bool>("NotApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StockDemandId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockDemandId");

                    b.ToTable("StockDemandItems");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.StockSku", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<Guid?>("MeasurementUnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("SkuId");

                    b.HasIndex("StockId");

                    b.ToTable("StockSkus");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameKa")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Income", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.IncomeItem", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.Income", "Outcome")
                        .WithMany("IncomeItems")
                        .HasForeignKey("IncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("Ucms.Stock.Domain.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Outcome");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.IncomeOutcome", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.Income", "Income")
                        .WithOne("IncomeOutcome")
                        .HasForeignKey("Ucms.Stock.Domain.Models.IncomeOutcome", "IncomeId");

                    b.HasOne("Ucms.Stock.Domain.Models.Stock", "IncomeStock")
                        .WithMany()
                        .HasForeignKey("IncomeStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Outcome", "Outcome")
                        .WithOne("IncomeOutcome")
                        .HasForeignKey("Ucms.Stock.Domain.Models.IncomeOutcome", "OutcomeId");

                    b.HasOne("Ucms.Stock.Domain.Models.Stock", "OutcomeStock")
                        .WithMany()
                        .HasForeignKey("OutcomeStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Income");

                    b.Navigation("IncomeStock");

                    b.Navigation("Outcome");

                    b.Navigation("OutcomeStock");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.OrganizationMeasurementUnit", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.OrganizationSku", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Outcome", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.OutcomeItem", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("Ucms.Stock.Domain.Models.Outcome", "Outcome")
                        .WithMany("OutcomeItems")
                        .HasForeignKey("OutcomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Outcome");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Sku", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Ucms.Stock.Domain.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId");

                    b.Navigation("Manufacturer");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Stock", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.Stock", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.StockBalanceRegister", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Product", "Product")
                        .WithMany("StockBalanceRegistery")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Sku", "Sku")
                        .WithMany("StockBalanceRegistery")
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("Sku");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.StockDemand", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.Outcome", "Outcome")
                        .WithMany()
                        .HasForeignKey("OutcomeId");

                    b.HasOne("Ucms.Stock.Domain.Models.Stock", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Stock", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outcome");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.StockDemandItem", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.StockDemand", "StockDemand")
                        .WithMany("StockDemandItems")
                        .HasForeignKey("StockDemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Product");

                    b.Navigation("StockDemand");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.StockSku", b =>
                {
                    b.HasOne("Ucms.Stock.Domain.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("Ucms.Stock.Domain.Models.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ucms.Stock.Domain.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Sku");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Income", b =>
                {
                    b.Navigation("IncomeItems");

                    b.Navigation("IncomeOutcome");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Outcome", b =>
                {
                    b.Navigation("IncomeOutcome");

                    b.Navigation("OutcomeItems");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Product", b =>
                {
                    b.Navigation("StockBalanceRegistery");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Sku", b =>
                {
                    b.Navigation("StockBalanceRegistery");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.Stock", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("Ucms.Stock.Domain.Models.StockDemand", b =>
                {
                    b.Navigation("StockDemandItems");
                });
#pragma warning restore 612, 618
        }
    }
}
